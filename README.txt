This program processes the text of ales Miserables including cleaning the text, extracting bigrams, and counting the occurrences of each bigram.

The program consists of two python files: preprocess.py, which processes the text and make one sentence each line, and mrbigram.py, which utilizes MapReduce to count and sort the occurrences of each  bigram.

In preprocess.py, I utilize natural language processing package (nltk) to recognize sentence and make each sentence per line.

In the mrbigram.py, I utilize natural language processing to tokenize the sentence and extract bigrams from each sentence. Then I use MapReduce to count and sort the occurences of each bigram. My job includes one mapper, one combiner, and two reducers. In the mapper, I first use tokenizer to separate words in a given sentence and then create birgams from the sentences. Then in each bigram, I conver the words in each bigram to lower case. And I check if a word in the birgam is in the stop word list. If so, I do not count its occurrences. If not, I count the occurrences of the bigram. The mapper eventually yields a tuple of (bigram, 1). Next, I use a combiner to calculate the sum of occurrences of each bigram. The reason why I use a combiner is that it calculates a subset of key-value pairs and therefore, can reduce the workload of the reducer than I am going to use next. Then I use two reducers, one for calculating the sum of occurrences of each bigram, one for sorting the list of tuples (where the first element is the occurrences and the second is the bigram), and print the top 50 bigrams. The first reducer yields a tuple of (None, (sum(values), bigram)). In the second reducer, I pass in a list of tuples of (sum(values), bigram). I sort by the first element in the tuple, which is the occurrences. I add a counter variable and a while loop to print only the top 50 bigrams.
